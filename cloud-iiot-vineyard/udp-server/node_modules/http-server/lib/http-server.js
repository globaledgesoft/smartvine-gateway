var MODULE = "http-server";

/*******************************************************************************************
 * Required Module(s)
 ******************************************************************************************/

var security = require('./security.js');

var express = require('express');
var expose = require('express-expose');
var path = require('path');
var ejs = require('ejs');
var connect = require('connect');
var helper = require('./helper');
var useragent = require('express-useragent');


/*******************************************************************************************
 * Variables
 ******************************************************************************************/

var app = null;
var host = null;
var port = null;




/*******************************************************************************************
 * HTTP Object
 ******************************************************************************************/

var HTTP = {};

HTTP.express=express


/*******************************************************************************************
 * HTTP Session Validator
 ******************************************************************************************/

HTTP.sessionCheck = function (req,res,next) {

	if(req.session && req.session.user){
		next();
	}
	else{
		if(req.isXMLHttpRequest){
			res.json({status:false,error:{type:"Session Expired",code:'109'},response:{data:[]}});
		}else{
			res.redirect('/');
		}
	}
};





/*******************************************************************************************
 * HTTP Server Start
 ******************************************************************************************/

HTTP.start = function (options) {

	var result = null;
	var startFunc = null;

	try {

		options.port ? port = options.port : port = 7070;
		options.host ? host = options.host : host = 'localhost';

		if(options.method) {

			startFunc = startServerMethod[options.method];
			result = startFunc ? startFunc(options) : "Error";
		}
		else {
			result = null;
		}
		return result;
	}
	catch (err) {
		console.log('Error @ [' + MODULE + '] HTTP Server Startup : ' + err);
	}
};





/*******************************************************************************************
 * Start HTTP Server with Session Authentication
 ******************************************************************************************/

var startServerWithSessionAuth = function (options) {

	/*try {

		var MemoryStore = express.session.MemoryStore;
		var sessionStore = new MemoryStore();
		var Session = connect.middleware.session.Session;

		app = express.createServer();
        app.express = express;
        app.use( useragent.express() );

		app.configure(function(){
			app.use(connect.logger('dev'));
			app.set('views', options.views.path);
			app.set('view engine', 'ejs');
			app.set('view options', { layout: true });
			app.use(express.bodyParser());
			app.use(express.cookieParser());
			app.use(express.session({store: sessionStore, secret: 'secret', key: 'express.sid', cookie: { path: '/', httpOnly: true, maxAge: 8*60*60*1000} }));
			app.use(helper.logger);
			app.set('title', 'RTHE_Mongodb');
			app.use(app.router);
			app.use(express.methodOverride());

			app.use(express.static(options.static.path));
		});

		app.register('.html', require('ejs'));


		app.configure('development', function(){
			app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
		});
		app.configure('production', function(){
			app.use(express.errorHandler());
		});

		app.listen(port, host);

		console.log ("\nServer started on [HOST : " + host + "] [PORT : " + port + "]");

		return app;

	}
	catch (err) {
		console.log('Error @ [' + MODULE + '] HTTP Server Startup with Session Auth : ' + err);
	}*/
    try {

        var RedisStore = require('connect-redis')(express);

        var MemoryStore = express.session.MemoryStore;
        var sessionStore = new MemoryStore();
//        var Session = connect.middleware.session.Session;

        app = express.createServer();
        app.express = express;
        app.use( useragent.express() );

        app.use(express.logger('dev'));
        app.sessionStore = getSessionStore(options["sessioStore"]);

        app.configure(function(){

            app.use(function (req, res, next) {
                res.view = function (module, html, data) {
                    var path = (((module && app.locals[module]) ? app.locals[module] : '') + html);
                    res.render (path, data);
                };
                next();
            });

            app.use(express.bodyParser());
            app.use(express.cookieParser());
            
            app.use(express.session({store:getSessionStore(options["sessioStore"]), secret: 'secret', key: 'express.sid', cookie: { path: '/', httpOnly: true, maxAge: 8*60*60*1000} }));
            app.use(express.static(options.static.path));
            app.use(helper.logger)
            app.set('views', options.views.path);
            app.set('view engine', 'ejs');
            app.set('view options', { layout: true });

            app.set('title', 'RTHE_Mongodb');
            app.use(app.router);
            app.use(express.methodOverride());


        });

        app.register('.html', require('ejs'));


        app.configure('development', function(){
            app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
        });
        app.configure('production', function(){
            app.use(express.errorHandler());
        });

        app.listen(port, host);

        console.log ("\nServer started on [HOST : " + host + "] [PORT : " + port + "]");

        return app;

    }
    catch (err) {
        console.log(err.stack);
        console.log('Error @ [' + MODULE + '] HTTP Server Startup with Session Auth : ' + err);
    }
};


var getSessionStore = function (options){

    switch (options["db"]){
        case  "redis" :
            var RedisStore = require('connect-redis')(express);
            return  (new  RedisStore({ host: options["host"], port: options["port"]}))
        case "mongo" :
        case "inmemory" :
        default :
            var MemoryStore = express.session.MemoryStore;
            var sessionStore = new MemoryStore();
            var Session = connect.middleware.session.Session;
            return  sessionStore;



    }
}


HTTP.setResponsePath = function (module, module_root) {
    app.locals[module] = (module_root + '/views');
    app.use (express.static (module_root + '/webapps'));
};





/*******************************************************************************************
 * Start HTTP Server with Basic Authentication
 ******************************************************************************************/

var startServerWithBasicAuth = function (options) {

//	try {
//
//		app = express.createServer( express.basicAuth(security.authorize) );
//
//		app.configure(function() {
//
//			app.set('views', path.resolve(__dirname, '../../../views'));
//		    app.set('view engine', 'ejs');
//		    app.set('title', 'Example');
//		    app.set('default language', 'en');
//		    app.set("view options", {layout: false});
//		    app.use(express.bodyParser());
//		    app.use(express.methodOverride());
//		    app.use(express.cookieParser());
//		    app.use(express.session({ secret: 'your secret here' }));
//		    app.use(app.router);
//		    app.use('/', express.static(path.resolve(__dirname, '../../../static')));
//		    app.expose(app.settings);
//
//		});
//
//		app.register('.html', require('ejs'));
//
//		app.listen(port, host);
//
//		console.log ("\nServer started on [HOST : " + httpSeverHost + "] [PORT : " + httpSeverPort + "]");
//
//		return app;
//
//	}
//	catch (err) {
//		console.log('Error @ [' + MODULE + '] HTTP Server Startup with Basic Auth : ' + err);
//	}
};





/*******************************************************************************************
 * Start HTTP Server without Authentication
 ******************************************************************************************/

var startServer = function (options) {

//	try {
//
//		app = express.createServer();
//
//		app.configure(function() {
//
//			app.set('views', path.resolve(__dirname, '../../../views'));
//			app.set('view options', { layout: false });
//			app.set('view engine', 'ejs');
//			app.set('title', 'Example');
//			app.set('default language', 'en');
//			app.use(express.bodyParser());
//			app.use(express.methodOverride());
//			app.use(express.cookieParser('keyboard unicorn'));
//			app.use(express.session({ secret: 'your secret here' }));
//			app.use(app.router);
//			app.use('/', express.static(path.resolve(__dirname, '../../../static')));
//			app.expose(app.settings);
//		});
//
//		app.register('.html', require('ejs'));
//
//		app.listen(httpSeverPort, httpSeverHost);
//
//		console.log ("\nServer started on [HOST : " + httpSeverHost + "] [PORT : " + httpSeverPort + "]");
//
//		return app;
//
//	}
//	catch (err) {
//		console.log('Error @ [' + MODULE + '] HTTP Server Startup without Auth : ' + err);
//	}

};





/*******************************************************************************************
 * HTTP Server List in terms of Authentication Methods
 ******************************************************************************************/

var startServerMethod = {

	basic : startServerWithBasicAuth,

	session : startServerWithSessionAuth,

	none : startServer
};




module.exports = exports = HTTP;





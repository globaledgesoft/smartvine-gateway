
/* *************************************************************
 * Import Required Node Modules
 * *************************************************************/

//var net = require('net');
var dgram = require("dgram");
var server = dgram.createSocket("udp4");


/* *************************************************************
 * Constructor
 * *************************************************************/
var UDPServer = function(options){

    this.host = options.host;
    this.port = options.port;
    this.handler = options.handler;
    this.server = server;
    this.colors = options.colors;
    this.init();
};

module.exports = UDPServer;

/* *************************************************************
 * Functions
 * *************************************************************/
UDPServer.prototype.init = function(){

    var self = this;
    self.start();
};

UDPServer.prototype.start = function(){
    var self = this;
    self.server.on("listening", function () {
        var address = self.server.address();
        console.log(self.colors.info("server listening " + address.address + ":" + address.port));

    });
    self.server.bind(self.port);
};

UDPServer.prototype.connect = function(){
    var self = this;

    self.server.on("error", function (err) {
        console.log("server error:\n" + err.stack);
        self.server.close();
    });

    self.server.on("message", function (msg, rinfo) {
        console.log("[UDP Server][" +new Date()+ "]Remote device connected from IP : "+rinfo.address+", Port : "+rinfo.port);
        if(self.handler){
            self.handler.socketHandler(msg, rinfo, function(err,obj){
                if(!err && obj.isAck){
                    console.log("[UDP Server][" +new Date()+ "]Sending Ack Message : "+obj.message +", Message Encoding : "+obj.msgType+", IP : "+rinfo.address+", "+rinfo.port+", StartOffset : "+obj.startOffSet);
                    var bufferedMessage = null;
                    if(obj.msgType){
                        bufferedMessage = new Buffer(obj.message, obj.msgType);
                    } else {
                        bufferedMessage = new Buffer(obj.message);
                    }
                    self.server.send(bufferedMessage, obj.startOffSet, bufferedMessage.length, rinfo.port, rinfo.address, function(err, bytes) {
                        console.log("[UDP Server][" +new Date()+ "]ACK Message sent");
                        console.log("-------------------------------------------------------------------------------------------------------");
                    });
                } else {
                    console.log("[UDP Server][" +new Date()+ "]No Ack Message Sent");
                }
            })
        }else{
            // LOG rotate
        }


    });
    	
};

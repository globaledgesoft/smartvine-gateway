/* ************************************************************************
 * Import required modules
 * ***********************************************************************/
var OffsetBuffer = require('offset-buffer');


/* ************************************************************************
 * Class Declaration
 * ***********************************************************************/
var Buffer = function () {

    this.bitMask8  = {
        1: 0X01,
        2: 0X03,
        3: 0X07,
        4: 0X0F,
        5: 0X1F,
        6: 0X3F,
        7: 0X7F,
        8: 0XFF
    };

    this.bitMask16  = {
        1: 0X0001,
        2: 0X0003,
        3: 0X0007,
        4: 0X000F,
        5: 0X001F,
        6: 0X003F,
        7: 0X007F,
        8: 0X00FF,
        9: 0X01FF,
        10: 0X03FF,
        11: 0X07FF,
        12: 0X0FFF,
        13: 0X1FFF,
        14: 0X3FFF,
        15: 0X7FFF,
        16: 0XFFFF

    };

    this.bitMask24  = {
        1: 0X000001,
        2: 0X000003,
        3: 0X000007,
        4: 0X00000F,
        5: 0X00001F,
        6: 0X00003F,
        7: 0X00007F,
        8: 0X0000FF,
        9: 0X0001FF,
        10: 0X0003FF,
        11: 0X0007FF,
        12: 0X000FFF,
        13: 0X001FFF,
        14: 0X003FFF,
        15: 0X007FFF,
        16: 0X00FFFF,
        17: 0X01FFFF,
        18: 0X03FFFF,
        19: 0X07FFFF,
        20: 0X0FFFFF,
        21: 0X1FFFFF,
        22: 0X3FFFFF,
        23: 0X7FFFFF,
        24: 0XFFFFFF
    };

    this.bitMask32  = {
        1: 0X00000001,
        2: 0X00000003,
        3: 0X00000007,
        4: 0X0000000F,
        5: 0X0000001F,
        6: 0X0000003F,
        7: 0X0000007F,
        8: 0X000000FF,
        9: 0X000001FF,
        10: 0X000003FF,
        11: 0X000007FF,
        12: 0X00000FFF,
        13: 0X00001FFF,
        14: 0X00003FFF,
        15: 0X00007FFF,
        16: 0X0000FFFF,
        17: 0X0001FFFF,
        18: 0X0003FFFF,
        19: 0X0007FFFF,
        20: 0X000FFFFF,
        21: 0X001FFFFF,
        22: 0X003FFFFF,
        23: 0X007FFFFF,
        24: 0X00FFFFFF,
        25: 0X01FFFFFF,
        26: 0X03FFFFFF,
        27: 0X07FFFFFF,
        28: 0X0FFFFFFF,
        29: 0X1FFFFFFF,
        30: 0X3FFFFFFF,
        31: 0X7FFFFFFF,
        32: 0XFFFFFFFF
    };

    this.returnValue = null;
};

module.exports = Buffer;


/**********************************************************************************
 * Functions
 *********************************************************************************/

/********************** Read 8 bits signed data **********************************/
Buffer.prototype.readInt8 = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readInt8(index);
    return  self.returnValue;
};

/********************** Read 8 bits unSigned data ********************************/
Buffer.prototype.readUInt8 = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readUInt8(index);
    return  self.returnValue;
};

/********************** Read 16 bits Big-endian signed data ***********************/
Buffer.prototype.readInt16BE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readInt16BE(index);
    return  self.returnValue;
};

/********************** Read 16 bits Big-endian unSigned data **********************/
Buffer.prototype.readUInt16BE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readUInt16BE(index);
    return  self.returnValue;
};

/********************** Read 16 bits little-endian signed data **********************/
Buffer.prototype.readInt16LE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readInt16LE(index);
    return  self.returnValue;
};

/********************** Read 16 bits little-endian unSigned data ********************/
Buffer.prototype.readUInt16LE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readUInt16LE(index);
    return  self.returnValue;
};

/********************** Read 24 bits Big-endian signed data **********************/
Buffer.prototype.readInt24BE = function(msgBuf,index){
    var self = this;
    self.returnValue = new OffsetBuffer(msgBuf,index);
    return  self.returnValue.readInt24BE();
};

/********************** Read 24 bits little-endian signed data ********************/
Buffer.prototype.readInt24LE = function(msgBuf,index){
    var self = this;
    self.returnValue = new OffsetBuffer(msgBuf,index);
    return  self.returnValue.readInt24LE();
};

/********************** Read 24 bits Big-endian unSigned data ********************/
Buffer.prototype.readUInt24BE = function(msgBuf,index){
    var self = this;
    self.returnValue = new OffsetBuffer(msgBuf,index);
    return  self.returnValue.readUInt24BE();
};

/********************** Read 24 bits little-endian unSigned data ********************/
Buffer.prototype.readUInt24LE = function(msgBuf,index){
    var self = this;
    self.returnValue = new OffsetBuffer(msgBuf,index);
    return  self.returnValue.readUInt24LE();
};

/********************** Read 32 bits Big-endian signed data ********************/
Buffer.prototype.readInt32BE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readInt32BE(index);
    return  self.returnValue;
};

/********************** Read 32 bits Big-endian unSigned data ********************/
Buffer.prototype.readUInt32BE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readUInt32BE(index);
    return  self.returnValue;
};

/********************** Read 32 bits little-endian signed data *********************/
Buffer.prototype.readInt32LE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readInt32LE(index);
    return  self.returnValue;
};

/********************** Read 32 bits little-endian unSigned data ********************/
Buffer.prototype.readUInt32LE = function(msgBuf,index){
    var self = this;
    self.returnValue = msgBuf.readUInt32LE(index);
    return  self.returnValue;
};

/********************************** Read  8 bits *************************************/
Buffer.prototype.getBit8 = function(decodedMsg,count,bitPosition){
    var self = this;
    var shiftBits;
    var shift = Number(8-(count+bitPosition));
    if(shift){
        shiftBits = decodedMsg >> shift;
        self.returnValue = shiftBits & self.bitMask8[count];
    } else {
        self.returnValue = decodedMsg & self.bitMask8[count];
    }
    return  self.returnValue;
};

/********************************** To get string *************************************/
Buffer.prototype.getString = function(msgBuf,type,from,to){
    var self = this;
    var buf = msgBuf.toString(type, from , to);
    self.returnValue = buf.trim();
    return  self.returnValue;
};

/********************************** Read  16 bits *************************************/
Buffer.prototype.getBit16 = function(decodedMsg,count,bitPosition){
    var self = this;
    var shiftBits;
    var shift = Number(16-(count+bitPosition));
    if(shift){
        shiftBits = decodedMsg >> shift;
        self.returnValue = shiftBits & self.bitMask16[count];
    } else {
        self.returnValue = decodedMsg & self.bitMask16[count];
    }
    return  self.returnValue;
};

/********************************** Read  24 bits *************************************/
Buffer.prototype.getBit24 = function(decodedMsg,count,bitPosition){
    var self = this;
    var shiftBits;
    var shift = Number(24-(count+bitPosition));
    if(shift){
        shiftBits = decodedMsg >> shift;
        self.returnValue = shiftBits & self.bitMask24[count];
    } else {
        self.returnValue = decodedMsg & self.bitMask24[count];
    }
    return  self.returnValue;
};

/********************************** Read  32 bits *************************************/
Buffer.prototype.getBit32 = function(decodedMsg,count,bitPosition){
    var self = this;
    var shiftBits;
    var shift = Number(32-(count+bitPosition));
    if(shift){
        shiftBits = decodedMsg >> shift;
        self.returnValue = shiftBits & self.bitMask32[count];
    } else {
        self.returnValue = decodedMsg & self.bitMask32[count];
    }
    return  self.returnValue;
};


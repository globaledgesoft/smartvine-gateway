/* ************************************************************************
 * Import required modules
 * ***********************************************************************/
var async = require('async');
var TBuffer = require('gesbuffer');
var tbuffer = new TBuffer();


/* ************************************************************************
 * Class Declaration
 * ***********************************************************************/
var DecodeEngine = function () {

};

module.exports = DecodeEngine;


/**********************************************************************************
 * Functions
 *********************************************************************************/

/***************************** Initiated the decoding *****************************/
DecodeEngine.prototype.init = function(msg,jsonObjs,callback){

    var self = this;
    var statusBuffer;
    self.messageObject = {};
    if(jsonObjs.protocol == 'udp'){

        statusBuffer = new Buffer(msg, jsonObjs.msgType);
        self.messageObject['deviceType'] = jsonObjs.device;
        async.filterSeries(jsonObjs.specArray, function (jsonObj, fieldCbk) {

            switch(jsonObj.type) {
                case "byteInt" :
                    self.byteInt(statusBuffer,jsonObj);
                    break;
                case "smallInt" :
                    self.smallInt(statusBuffer,jsonObj);
                    break;
                case "integer" :
                    self.integer(statusBuffer,jsonObj);
                    break;
                case "longInt" :
                    self.longInt(statusBuffer,jsonObj);
                    break;
                case "string" :
                    self.string(statusBuffer,jsonObj);
                    break;
                case "double" :
                    self.double(statusBuffer,jsonObj);
                    break;
                case "bits" :
                    self.bits(statusBuffer,jsonObj);
                    break;
                case "byte3" :
                    self.byte3(statusBuffer,jsonObj);
                    break;
            }
            fieldCbk(null);
        }, function (result) {
            callback(self.messageObject)
        });
    } else if(jsonObjs.protocol == 'HTTP' && jsonObjs.device == 'MOOG'){
        self.messageObject['alerts'] = [];
        self.messageObject['deviceType'] = jsonObjs.device;
        async.filterSeries(jsonObjs.specArray, function (jsonObj, fieldCbk) {

            switch(jsonObj.fieldType) {
                case "others" :
                    self.others(msg,jsonObj);
                    break;
                case "log" :
                    self.log(msg,jsonObj);
                    break;
                case "cell" :
                    self.cell(msg,jsonObj);
                    break;
                case "alerts" :
                    self.alerts(msg,jsonObj);
                    break;
            }
            fieldCbk(null);
        }, function (result) {
            callback(self.messageObject)
        });
    }

};

/***************************** To process byteInt data(1 Byte) *****************************/
DecodeEngine.prototype.byteInt = function(bufMsg,jsonObj){

    var self = this;
    var decodedMsg;
    if(jsonObj.signed && jsonObj.expression){
        decodedMsg = tbuffer.readInt8(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (!jsonObj.signed && jsonObj.expression){
        decodedMsg = tbuffer.readUInt8(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (jsonObj.signed && !jsonObj.expression){
        self.messageObject[jsonObj.field] = tbuffer.readInt8(bufMsg,jsonObj.index);
    } else if (!jsonObj.signed && !jsonObj.expression){
        self.messageObject[jsonObj.field] = tbuffer.readUInt8(bufMsg,jsonObj.index);
    }
};

/***************************** To process smallInt data(2 Byte) *****************************/
DecodeEngine.prototype.smallInt = function(bufMsg,jsonObj){

    var self = this;
    var decodedMsg;
    if(jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "BE"){
        decodedMsg = tbuffer.readInt16BE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (!jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "BE"){
        decodedMsg = tbuffer.readUInt16BE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] =jsonObj.expression(decodedMsg);
    } else if (jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "BE"){
        self.messageObject[jsonObj.field] = tbuffer.readInt16BE(bufMsg,jsonObj.index);
    } else if (!jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "BE"){
        self.messageObject[jsonObj.field] = tbuffer.readUInt16BE(bufMsg,jsonObj.index);
    }else if(jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "LE"){
        decodedMsg = tbuffer.readInt16LE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (!jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "LE"){
        decodedMsg = tbuffer.readUInt16LE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] =jsonObj.expression(decodedMsg);
    } else if (jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "LE"){
        self.messageObject[jsonObj.field] = tbuffer.readInt16LE(bufMsg,jsonObj.index);
    } else if (!jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "LE"){
        self.messageObject[jsonObj.field] = tbuffer.readUInt16LE(bufMsg,jsonObj.index);
    }
};

/***************************** To process integer data(4 Byte) *****************************/
DecodeEngine.prototype.integer = function(bufMsg,jsonObj){

    var self = this;
    var decodedMsg;
    if(jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "BE"){
        decodedMsg = tbuffer.readInt32BE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] =jsonObj.expression(decodedMsg);
    } else if (!jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "BE"){
        decodedMsg = tbuffer.readUInt32BE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "BE"){
        self.messageObject[jsonObj.field] = tbuffer.readInt32BE(bufMsg,jsonObj.index);
    } else if (!jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "BE"){
        self.messageObject[jsonObj.field] = tbuffer.readUInt32BE(bufMsg,jsonObj.index);
    } else if(jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "LE"){
        decodedMsg = tbuffer.readInt32LE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (!jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "LE"){
        decodedMsg = tbuffer.readUInt32LE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "LE"){
        self.messageObject[jsonObj.field] = tbuffer.readInt32LE(bufMsg,jsonObj.index);
    } else if (!jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "LE"){
        self.messageObject[jsonObj.field] = tbuffer.readUInt32LE(bufMsg,jsonObj.index);
    }
};

/*************************** To process longInt data(greater than 4 Byte) *********************/
DecodeEngine.prototype.longInt = function(bufMsg,jsonObj){

};

/***************************** To process string data ****************************************/
DecodeEngine.prototype.string = function(bufMsg,jsonObj){

    var buf = tbuffer.getString(bufMsg,jsonObj.stringType, jsonObj.index , (jsonObj.index+jsonObj.count));
    this.messageObject[jsonObj.field] = buf;
};

/*************************** To process double data(floating data) **************************/
DecodeEngine.prototype.double = function(msg,jsonObjs){

};

/******************************** To process bits data  *************************************/
DecodeEngine.prototype.bits = function(bufMsg,jsonObj){

    var self = this;
    var decodedMsg;
    var decodedBit;

    self.getFunctionName(jsonObj,function(functionName,readFunctionName){

        if(jsonObj.expression){
            decodedMsg = tbuffer[readFunctionName](bufMsg,jsonObj.index);
            decodedBit = tbuffer[functionName](decodedMsg,jsonObj.count,jsonObj.bitPosition);
            self.messageObject[jsonObj.field] = jsonObj.expression(decodedBit);
        } else if (!jsonObj.expression){
            decodedMsg = tbuffer[readFunctionName](bufMsg,jsonObj.index);
            decodedBit = tbuffer[functionName](decodedMsg,jsonObj.count,jsonObj.bitPosition);
            self.messageObject[jsonObj.field] = decodedBit;
        }
    });
};

/****************************** To process byte3 data(3 Byte)  *******************************/
DecodeEngine.prototype.byte3 = function(bufMsg,jsonObj){

    var self = this;
    var decodedMsg;

    if(jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "BE"){
        decodedMsg = tbuffer.readInt24BE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] =jsonObj.expression(decodedMsg);
    } else if (!jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "BE"){
        decodedMsg = tbuffer.readUInt24BE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "BE"){
        self.messageObject[jsonObj.field] = tbuffer.readInt24BE(bufMsg,jsonObj.index);
    } else if (!jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "BE"){
        self.messageObject[jsonObj.field] = tbuffer.readUInt24BE(bufMsg,jsonObj.index);
    } else if(jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "LE"){
        decodedMsg = tbuffer.readInt24LE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (!jsonObj.signed && jsonObj.expression && jsonObj.LEorBE == "LE"){
        decodedMsg = tbuffer.readUInt24LE(bufMsg,jsonObj.index);
        self.messageObject[jsonObj.field] = jsonObj.expression(decodedMsg);
    } else if (jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "LE"){
        self.messageObject[jsonObj.field] = tbuffer.readInt24LE(bufMsg,jsonObj.index);
    } else if (!jsonObj.signed && !jsonObj.expression && jsonObj.LEorBE == "LE"){
        self.messageObject[jsonObj.field] = tbuffer.readUInt24LE(bufMsg,jsonObj.index);
    }
};

/******************************** To get function names  **********************************/
DecodeEngine.prototype.getFunctionName = function(jsonObj,callback){

    var functionName;
    var readFunctionName;
    if(jsonObj.fromBytes == 1){
        functionName = 'getBit8';
        if(jsonObj.signed){
            readFunctionName = 'readInt8';
        } else {
            readFunctionName = 'readUInt8';
        }
    } else if(jsonObj.fromBytes == 2){
        functionName = 'getBit16';
        if(jsonObj.signed && jsonObj.LEorBE == "BE"){
            readFunctionName = 'readInt16BE';
        } else if(!jsonObj.signed && jsonObj.LEorBE == "BE"){
            readFunctionName = 'readUInt16BE';
        } else if(jsonObj.signed && jsonObj.LEorBE == "LE"){
            readFunctionName = 'readInt16LE';
        } else if(!jsonObj.signed && jsonObj.LEorBE == "LE"){
            readFunctionName = 'readUInt16LE';
        }
    } else if(jsonObj.fromBytes == 3){
        functionName = 'getBit24';
        if(jsonObj.signed && jsonObj.LEorBE == "BE"){
            readFunctionName = 'readInt24BE';
        } else if(!jsonObj.signed && jsonObj.LEorBE == "BE"){
            readFunctionName = 'readUInt24BE';
        } else if(jsonObj.signed && jsonObj.LEorBE == "LE"){
            readFunctionName = 'readInt24LE';
        } else if(!jsonObj.signed && jsonObj.LEorBE == "LE"){
            readFunctionName = 'readUInt24LE';
        }
    }  else if(jsonObj.fromBytes == 4){
        functionName = 'getBit32';
        if(jsonObj.signed && jsonObj.LEorBE == "BE"){
            readFunctionName = 'readInt32BE';
        } else if(!jsonObj.signed && jsonObj.LEorBE == "BE"){
            readFunctionName = 'readUInt32BE';
        } else if(jsonObj.signed && jsonObj.LEorBE == "LE"){
            readFunctionName = 'readInt32LE';
        } else if(!jsonObj.signed && jsonObj.LEorBE == "LE"){
            readFunctionName = 'readUInt32LE';
        }
    } else {
        functionName = 'getBit8';
        readFunctionName = 'readUInt8';
    }
    callback(functionName,readFunctionName);
};


/******************************** To process Normal json data  *************************************/
DecodeEngine.prototype.others = function(msg,jsonObj){

    var self = this;
    if(jsonObj.expression){
        msg[jsonObj.field] ? self.messageObject[jsonObj.field] = jsonObj.expression(msg[jsonObj.field]) : '';
    } else if (!jsonObj.expression){
        msg[jsonObj.field] ? self.messageObject[jsonObj.field] = msg[jsonObj.field] : '';
    }
};


/******************************** To process log field data  *************************************/
DecodeEngine.prototype.log = function(msg,jsonObj){

    var self = this;
    var log;
    var field;

    if(msg.log){
        log = msg.log.split(',');
        if(jsonObj.expression){
            self.messageObject[jsonObj.field] = jsonObj.expression(log[jsonObj.index]);
        } else if (!jsonObj.expression){
            self.messageObject[jsonObj.field] = log[jsonObj.index];
        }
    }

};


/******************************** To process cell field data  *************************************/
DecodeEngine.prototype.cell = function(msg,jsonObj){

    var self = this;
    var cell;
    if(msg.cell){
        cell = msg.cell.split(',');
        if(jsonObj.expression){
            self.messageObject[jsonObj.field] = jsonObj.expression(cell[jsonObj.index]);
        } else if (!jsonObj.expression){
            self.messageObject[jsonObj.field] = cell[jsonObj.index];
        }
    }
};


/******************************** To process alerts data  *************************************/
DecodeEngine.prototype.alerts = function(msg,jsonObj) {

    var self = this;
    var alertMsg = {};
    var decodedMsg;
    var decodedBit;
    var innerArray = [];
    if (jsonObj.type == 'bits') {
        alertMsg = msg.alerts_mask;
        var alertMessage = alertMsg.substring(2);
        var bufMsg = new Buffer(alertMessage,'hex');
        self.getFunctionName(jsonObj,function(functionName,readFunctionName){

            if(jsonObj.expression){
                decodedMsg = tbuffer[readFunctionName](bufMsg,jsonObj.index);
                decodedBit = tbuffer[functionName](decodedMsg,jsonObj.count,jsonObj.bitPosition);
                innerArray.push(jsonObj.field);
                innerArray.push(jsonObj.expression(decodedBit));
                self.messageObject['alerts'].push(innerArray);
            } else if (!jsonObj.expression){
                decodedMsg = tbuffer[readFunctionName](bufMsg,jsonObj.index);
                decodedBit = tbuffer[functionName](decodedMsg,jsonObj.count,jsonObj.bitPosition);
                innerArray.push(jsonObj.field);
                innerArray.push((decodedBit));
                self.messageObject['alerts'].push(innerArray);
            }
        });
    }


};
